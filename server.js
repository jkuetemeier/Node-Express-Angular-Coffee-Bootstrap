// Generated by CoffeeScript 1.6.3
"use strict";
/*
  Requires
*/

var LocalStrategy, assets, coffee, config, connect_flash, ensureAuthenticated, errorHandler, express, findById, findByUsername, http, localsHelper, passport, passportLocal, path, routes, server, user, user_guest, users;

express = require('express');

assets = require('connect-assets');

path = require('path');

http = require('http');

coffee = require('coffee-script');

routes = require('./server/routes');

user = require('./server/routes/user');

passport = require('passport');

passportLocal = require('passport-local');

LocalStrategy = passportLocal.Strategy;

connect_flash = require('connect-flash');

config = require('./server/config/server-config');

errorHandler = require('./server/src/errorHandler');

/*
  passport authentication - part I
*/


user_guest = {
  id: -1,
  username: 'Guest',
  password: '',
  email: ''
};

users = [
  {
    id: 1,
    username: 'bob',
    password: 'secret',
    email: 'bob@example.com'
  }, {
    id: 2,
    username: 'joe',
    password: 'birthday',
    email: 'joe@example.com'
  }
];

findById = function(id, fn) {
  var idx;
  idx = id - 1;
  if (users[idx]) {
    return fn(null, users[idx]);
  } else {
    return fn(new Error('User ' + id + ' does not exist'));
  }
};

findByUsername = function(username, fn) {
  var i, _i, _ref;
  for (i = _i = 0, _ref = users.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    user = users[i];
    if (user.username === username) {
      return fn(null, user);
    }
  }
  return fn(null, null);
};

/*
  Passport session setup.
  To support persistent login sessions, Passport needs to be able to
  serialize users into and deserialize users out of the session.  Typically,
  this will be as simple as storing the user ID when serializing, and finding
  the user by ID when deserializing.
*/


passport.serializeUser((function(user, done) {
  return done(null, user.id);
}));

passport.deserializeUser((function(id, done) {
  return findById(id, function(err, user) {
    return done(err, user);
  });
}));

/*
  Use the LocalStrategy within Passport.
  Strategies in passport require a verify function, which accept
  credentials (in this case, a username and password), and invoke a callback
  with a user object.  In the real world, this would query a database;
  however, in this example we are using a baked-in set of users.
*/


passport.use(new LocalStrategy(function(username, password, done) {
  return process.nextTick(function() {
    return findByUsername(username, function(err, user) {
      if (err) {
        return done(err);
      }
      if (!user) {
        return done(null, false, {
          message: 'Unknown user ' + username
        });
      }
      if (user.password !== password) {
        return done(null, false, {
          message: 'Invalid password'
        });
      }
      return done(null, user);
    });
  });
}));

/*
  Declare & Configure the Server
*/


server = module.exports = express();

localsHelper = function() {
  return function(req, res, next) {
    var language;
    if (req.isAuthenticated()) {
      user = req.user;
    } else {
      user = user_guest;
    }
    user.isAuthenticated = req.isAuthenticated();
    res.locals({
      user: user
    });
    language = req.session.language || "en";
    res.locals({
      'language': language
    });
    res.locals({
      'i18': function(clause) {
        return translate(clause, language);
      }
    });
    return next();
  };
};

/*
  'static' locals
*/


server.locals({
  config: config,
  title: 'Node Express Angular Coffee Bootstrap - Template',
  author: 'Joerg Kuetemeier (jkuetemeier@kuetemeier.net)'
});

server.configure(function() {
  server.set('port', process.env.PORT || config.port);
  server.set('views', path.join(__dirname, 'server', '/views'));
  server.set('view engine', 'jade');
  server.set('view options', {
    layout: false,
    pretty: false
  });
  server.use(express.favicon());
  server.use(express.logger('dev'));
  server.use(express.bodyParser());
  server.use(express.methodOverride());
  server.use(assets({
    src: path.join(__dirname, 'client', 'src')
  }));
  server.use(express.cookieParser(config.cookieSecret));
  server.use(express.session());
  server.use(connect_flash());
  server.use(passport.initialize());
  server.use(passport.session());
  server.use(localsHelper());
  /*
    # enable this if you have styl css files in your public folder
    server.use(require('stylus').middleware(path.join(__dirname, 'client', '/public')))
  */

  server.use(express["static"](path.join(__dirname, 'client', 'public')));
  server.use(errorHandler.notFound404);
  server.use(errorHandler.logError);
  server.use(errorHandler.xhrError);
  server.use(errorHandler.defaultError);
  server.use(server.router);
  return server.use(function(req, res, next) {
    res.status(404);
    if (req.accepts('html')) {
      return res.render('404-not-found', {
        url: req.url
      });
    } else {
      if (req.accepts('json')) {
        return res.send({
          error: 'Not found'
        });
      } else {
        return res.type('txt').send('Not found');
      }
    }
  });
});

/*
  specific server config for development environment
*/


server.configure('development', function() {
  console.log('server running in development mode');
  return server.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

/*
  specific server config for production environment
*/


server.configure('production', function() {
  console.log('server running in production mode');
  return server.use(express.errorHandler());
});

/*
  Define routes
*/


server.get('/', function(req, res) {
  return routes.index(req, res);
});

server.get('/error', function(req, res) {
  throw "Error - Fehler";
});

server.get('/users', function(req, res) {
  return user.list(req, res);
});

server.get('/partials/:name', function(req, res) {
  var name;
  name = req.params.name;
  return res.render('partials/' + name);
});

server.get('/view1', function(req, res) {
  return res.render('index');
});

server.get('/view2', function(req, res) {
  return res.render('index');
});

/*
  authentication stuff
*/


server.get('/login', function(req, res) {
  return res.render('login', {
    message: req.flash('error')
  });
});

server.post('/login', passport.authenticate('local', {
  failureRedirect: '/login',
  failureFlash: true
}), function(req, res) {
  return res.redirect('/');
});

server.get('/logout', function(req, res) {
  req.logout();
  return res.redirect('/');
});

/*
 Simple route middleware to ensure user is authenticated.
 Use this route middleware on any resource that needs to be protected.  If
 the request is authenticated (typically via a persistent login session),
 the request will proceed.  Otherwise, the user will be redirected to the
 login page.
*/


ensureAuthenticated = function(req, res, next) {
  if (res.locals.user.isAuthenticated) {
    return next();
  }
  return res.redirect('/login');
};

server.get('/account', ensureAuthenticated, function(req, res) {
  return res.render('account', {});
});

/*
  Startup and log.
*/


http.createServer(server).listen(server.get('port'), function() {
  return console.log("Express server listening on port " + (server.get('port')));
});
